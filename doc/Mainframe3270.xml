<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="Mainframe3270" type="LIBRARY" format="ROBOT" scope="SUITE" generated="2021-12-03T11:53:54Z" specversion="3" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\__init__.py" lineno="11">
<version>2.12</version>
<doc>Mainframe3270 is a library for Robot Framework based on [https://pypi.org/project/py3270/|py3270 project],
a Python interface to x3270, an IBM 3270 terminal emulator. It provides an API to a x3270 or s3270 subprocess.

= Installation  =

For use this library you need to install the [http://x3270.bgp.nu/download.html|x3270 project]
and put the directory on your PATH. On Windows, you need to download wc3270 and put
the "C:\Program Files\wc3270" in PATH of the Environment Variables.

= Notes  =

By default the import set the visible argument to true, on this option the py3270 is running the wc3270.exe,
but is you set the visible to false, the py3270 will run the ws3270.exe.

= Example =

| *** Settings ***
| Library           Mainframe3270
| Library           BuiltIn
|
| *** Test Cases ***
| Example
|     Open Connection    Hostname    LUname
|     Change Wait Time    0.4
|     Change Wait Time After Write    0.4
|     Set Screenshot Folder    C:\\Temp\\IMG
|     ${value}    Read    3    10    17
|     Page Should Contain String    ENTER APPLICATION
|     Wait Field Detected
|     Write Bare    applicationname
|     Send Enter
|     Take Screenshot
|     Close Connection</doc>
<tags>
</tags>
<inits>
<init name="Init" lineno="51">
<arguments repr="visible=True, timeout=30, wait_time=0.5, wait_time_after_write=0, img_folder=., run_on_failure_keyword=Take Screenshot">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="visible=True">
<name>visible</name>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=30">
<name>timeout</name>
<default>30</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time=0.5">
<name>wait_time</name>
<default>0.5</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="wait_time_after_write=0">
<name>wait_time_after_write</name>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="img_folder=.">
<name>img_folder</name>
<default>.</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="run_on_failure_keyword=Take Screenshot">
<name>run_on_failure_keyword</name>
<default>Take Screenshot</default>
</arg>
</arguments>
<doc>You can change to hide the emulator screen set the argument visible=${False}

For change the wait_time see `Change Wait Time`, to change the img_folder
see the `Set Screenshot Folder` and to change the timeout see the `Change Timeout` keyword.

By default, Mainframe3270 will take a screenshot on failure. You can overwrite this to run any other
keyword by setting the ``run_on_failure_keyword`` option. If you pass ``None`` to this argument, no keyword will be run.</doc>
<shortdoc>You can change to hide the emulator screen set the argument visible=${False}</shortdoc>
</init>
</inits>
<keywords>
<kw name="Change Timeout" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="39">
<arguments repr="seconds">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="seconds">
<name>seconds</name>
</arg>
</arguments>
<doc>Change the timeout for connection in seconds.</doc>
<shortdoc>Change the timeout for connection in seconds.</shortdoc>
</kw>
<kw name="Change Wait Time" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="77">
<arguments repr="wait_time">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="wait_time">
<name>wait_time</name>
</arg>
</arguments>
<doc>To give time for the mainframe screen to be "drawn" and receive the next commands, a "wait time" has been
created, which by default is set to 0.5 seconds. This is a sleep applied AFTER the follow keywords:

`Execute Command`
`Send Enter`
`Send PF`
`Write`
`Write in position`

If you want to change this value just use this keyword passing the time in seconds.

Examples:
    | Change Wait Time | 0.1 |
    | Change Wait Time | 2 |</doc>
<shortdoc>To give time for the mainframe screen to be "drawn" and receive the next commands, a "wait time" has been created, which by default is set to 0.5 seconds. This is a sleep applied AFTER the follow keywords:</shortdoc>
</kw>
<kw name="Change Wait Time After Write" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="96">
<arguments repr="wait_time_after_write">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="wait_time_after_write">
<name>wait_time_after_write</name>
</arg>
</arguments>
<doc>To give the user time to see what is happening inside the mainframe, a "change wait time after write" has
been created, which by default is set to 0 seconds. This is a sleep applied AFTER the string sent in this
keywords:

`Write`
`Write Bare`
`Write in position`
`Write Bare in position`

If you want to change this value just use this keyword passing the time in seconds.

Note: This keyword is useful for debug purpose

Examples:
    | Change Wait Time After Write | 0.5 |
    | Change Wait Time After Write | 2 |</doc>
<shortdoc>To give the user time to see what is happening inside the mainframe, a "change wait time after write" has been created, which by default is set to 0 seconds. This is a sleep applied AFTER the string sent in this keywords:</shortdoc>
</kw>
<kw name="Close Connection" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="67">
<arguments repr="">
</arguments>
<doc>Disconnect from the host.</doc>
<shortdoc>Disconnect from the host.</shortdoc>
</kw>
<kw name="Delete Char" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="203">
<arguments repr="ypos=None, xpos=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ypos=None">
<name>ypos</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="xpos=None">
<name>xpos</name>
<default>None</default>
</arg>
</arguments>
<doc>Delete character under cursor. If you want to delete a character that is in
another position, simply pass the coordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Examples:
    | Delete Char |
    | Delete Char | ypos=9 | xpos=25 |</doc>
<shortdoc>Delete character under cursor. If you want to delete a character that is in another position, simply pass the coordinates "ypos"/"xpos".</shortdoc>
</kw>
<kw name="Delete Field" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="219">
<arguments repr="ypos=None, xpos=None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ypos=None">
<name>ypos</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="xpos=None">
<name>xpos</name>
<default>None</default>
</arg>
</arguments>
<doc>Delete a entire contents in field at current cursor location and positions
cursor at beginning of field. If you want to delete a field that is in
another position, simply pass the coordinates "ypos"/"xpos" of any part of the field.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Examples:
    | Delete Field |
    | Delete Field | ypos=12 | xpos=6 |</doc>
<shortdoc>Delete a entire contents in field at current cursor location and positions cursor at beginning of field. If you want to delete a field that is in another position, simply pass the coordinates "ypos"/"xpos" of any part of the field.</shortdoc>
</kw>
<kw name="Execute Command" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="142">
<arguments repr="cmd">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="cmd">
<name>cmd</name>
</arg>
</arguments>
<doc>Execute an [http://x3270.bgp.nu/wc3270-man.html#Actions|x3270 command].

Examples:
    | Execute Command | Enter |
    | Execute Command | Home |
    | Execute Command | Tab |
    | Execute Command | PF(1) |</doc>
<shortdoc>Execute an [http://x3270.bgp.nu/wc3270-man.html#Actions|x3270 command].</shortdoc>
</kw>
<kw name="Move Next Field" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="243">
<arguments repr="">
</arguments>
<doc>Move the cursor to the next input field. Equivalent to pressing the Tab key.</doc>
<shortdoc>Move the cursor to the next input field. Equivalent to pressing the Tab key.</shortdoc>
</kw>
<kw name="Move Previous Field" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="249">
<arguments repr="">
</arguments>
<doc>Move the cursor to the previous input field. Equivalent to pressing the Shift+Tab keys.</doc>
<shortdoc>Move the cursor to the previous input field. Equivalent to pressing the Shift+Tab keys.</shortdoc>
</kw>
<kw name="Open Connection" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="45">
<arguments repr="host, LU=None, port=23">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="host">
<name>host</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="LU=None">
<name>LU</name>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="port=23">
<name>port</name>
<default>23</default>
</arg>
</arguments>
<doc>Create a connection with IBM3270 mainframe with the default port 23. To make a connection with the mainframe
you only must inform the Host. You can pass the Logical Unit Name and the Port as optional.

Example:
    | Open Connection | Hostname |
    | Open Connection | Hostname | LU=LUname |
    | Open Connection | Hostname | port=992 |</doc>
<shortdoc>Create a connection with IBM3270 mainframe with the default port 23. To make a connection with the mainframe you only must inform the Host. You can pass the Logical Unit Name and the Port as optional.</shortdoc>
</kw>
<kw name="Page Should Contain All Strings" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="420">
<arguments repr="list_string, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string">
<name>list_string</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Search if all of the strings in a given list exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain All Strings | ${list_of_string} |
    | Page Should Contain All Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Search if all of the strings in a given list exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain Any String" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="385">
<arguments repr="list_string, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string">
<name>list_string</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Search if one of the strings in a given list exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain Any String | ${list_of_string} |
    | Page Should Contain Any String | ${list_of_string} | ignore_case=${True} |
    | Page Should Contain Any String | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Search if one of the strings in a given list exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain Match" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="510">
<arguments repr="txt, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Fails unless the given string matches the given pattern.

Pattern matching is similar as matching files in a shell, and it is always case-sensitive.
In the pattern, * matches to anything and ? matches to any single character.

Note that the entire screen is only considered a string for this keyword, so if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen it
should be reported as follows: **something**

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
    | Page Should Contain Match | **something** |
    | Page Should Contain Match | **so???hing** |
    | Page Should Contain Match | **someTHING** | ignore_case=${True} |
    | Page Should Contain Match | **something** | error_message=New error message |</doc>
<shortdoc>Fails unless the given string matches the given pattern.</shortdoc>
</kw>
<kw name="Page Should Contain String" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="348">
<arguments repr="txt, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Search if a given string exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain String | something |
    | Page Should Contain String | someTHING | ignore_case=${True} |
    | Page Should Contain String | something | error_message=New error message |</doc>
<shortdoc>Search if a given string exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Contain String X Times" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="456">
<arguments repr="txt, number, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="number">
<name>number</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Search if the entered string appears the desired number of times on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
       | Page Should Contain String X Times | something | 3 |
       | Page Should Contain String X Times | someTHING | 3 | ignore_case=${True} |
       | Page Should Contain String X Times | something | 3 | error_message=New error message |</doc>
<shortdoc>Search if the entered string appears the desired number of times on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Match Regex" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="482">
<arguments repr="regex_pattern">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="regex_pattern">
<name>regex_pattern</name>
</arg>
</arguments>
<doc>Fails if string does not match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<shortdoc>Fails if string does not match pattern as a regular expression. Regular expression check is implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used, for example, in Java, Ruby and .NET.</shortdoc>
</kw>
<kw name="Page Should Not Contain All Strings" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="434">
<arguments repr="list_string, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string">
<name>list_string</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Fails if one of the strings in a given list exists on the mainframe screen. if one of the string
are found, the keyword will raise a exception.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain All Strings | ${list_of_string} |
    | Page Should Not Contain All Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Not Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Fails if one of the strings in a given list exists on the mainframe screen. if one of the string are found, the keyword will raise a exception.</shortdoc>
</kw>
<kw name="Page Should Not Contain Any String" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="405">
<arguments repr="list_string, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_string">
<name>list_string</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Fails if one or more of the strings in a given list exists on the mainframe screen. if one or more of the
string are found, the keyword will raise a exception.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain Any Strings | ${list_of_string} |
    | Page Should Not Contain Any Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Not Contain Any Strings | ${list_of_string} | error_message=New error message |</doc>
<shortdoc>Fails if one or more of the strings in a given list exists on the mainframe screen. if one or more of the string are found, the keyword will raise a exception.</shortdoc>
</kw>
<kw name="Page Should Not Contain Match" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="542">
<arguments repr="txt, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Fails if the given string matches the given pattern.

Pattern matching is similar as matching files in a shell, and it is always case-sensitive.
In the pattern, * matches to anything and ? matches to any single character.

Note that the entire screen is only considered a string for this keyword, so if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen it
should be reported as follows: **something**

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain Match | **something** |
    | Page Should Not Contain Match | **so???hing** |
    | Page Should Not Contain Match | **someTHING** | ignore_case=${True} |
    | Page Should Not Contain Match | **something** | error_message=New error message |</doc>
<shortdoc>Fails if the given string matches the given pattern.</shortdoc>
</kw>
<kw name="Page Should Not Contain String" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="367">
<arguments repr="txt, ignore_case=False, error_message=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignore_case=False">
<name>ignore_case</name>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="error_message=None">
<name>error_message</name>
<default>None</default>
</arg>
</arguments>
<doc>Search if a given string NOT exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain String | something |
    | Page Should Not Contain String | someTHING | ignore_case=${True} |
    | Page Should Not Contain String | something | error_message=New error message |</doc>
<shortdoc>Search if a given string NOT exists on the mainframe screen.</shortdoc>
</kw>
<kw name="Page Should Not Match Regex" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="496">
<arguments repr="regex_pattern">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="regex_pattern">
<name>regex_pattern</name>
</arg>
</arguments>
<doc>Fails if string does match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<shortdoc>Fails if string does match pattern as a regular expression. Regular expression check is implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used, for example, in Java, Ruby and .NET.</shortdoc>
</kw>
<kw name="Read" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="117">
<arguments repr="ypos, xpos, length">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos">
<name>ypos</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos">
<name>xpos</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="length">
<name>length</name>
</arg>
</arguments>
<doc>Get a string of "length" at screen co-ordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the terminal.

Example for read a string in the position y=8 / x=10 of a length 15:
    | ${value} | Read | 8 | 10 | 15 |</doc>
<shortdoc>Get a string of "length" at screen co-ordinates "ypos"/"xpos".</shortdoc>
</kw>
<kw name="Read All Screen" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="133">
<arguments repr="">
</arguments>
<doc>Reads the current screen and returns all content in one string.

Example:
    | ${content} | Read All Screen |</doc>
<shortdoc>Reads the current screen and returns all content in one string.</shortdoc>
</kw>
<kw name="Register Run On Failure Keyword" lineno="83">
<arguments repr="keyword">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword">
<name>keyword</name>
</arg>
</arguments>
<doc>This keyword lets you change the keyword that runs on failure during test execution.
The default is `Take Screenshot`, which is set on library import.

You can set ``None`` to this keyword, if you do not want to run any keyword on failure.</doc>
<shortdoc>This keyword lets you change the keyword that runs on failure during test execution. The default is `Take Screenshot`, which is set on library import.</shortdoc>
</kw>
<kw name="Send Enter" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="236">
<arguments repr="">
</arguments>
<doc>Send a Enter to the screen.</doc>
<shortdoc>Send a Enter to the screen.</shortdoc>
</kw>
<kw name="Send PF" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="255">
<arguments repr="PF">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="PF">
<name>PF</name>
</arg>
</arguments>
<doc>Send a Program Function to the screen.

Example:
       | Send PF | 3 |</doc>
<shortdoc>Send a Program Function to the screen.</shortdoc>
</kw>
<kw name="Set Screenshot Folder" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="155">
<arguments repr="path">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path">
<name>path</name>
</arg>
</arguments>
<doc>Set a folder to keep the html files generated by the `Take Screenshot` keyword.

Example:
    | Set Screenshot Folder | C:\\Temp\\Images |</doc>
<shortdoc>Set a folder to keep the html files generated by the `Take Screenshot` keyword.</shortdoc>
</kw>
<kw name="Take Screenshot" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="168">
<arguments repr="height=410, width=670">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="height=410">
<name>height</name>
<default>410</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="width=670">
<name>width</name>
<default>670</default>
</arg>
</arguments>
<doc>Generate a screenshot of the IBM 3270 Mainframe in a html format. The
default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.

The Screenshot is printed in a iframe log, with the values of height=410 and width=670, you
can change this values passing them from the keyword.

Examples:
    | Take Screenshot |
    | Take Screenshot | height=500 | width=700 |</doc>
<shortdoc>Generate a screenshot of the IBM 3270 Mainframe in a html format. The default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.</shortdoc>
</kw>
<kw name="Wait Field Detected" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="188">
<arguments repr="">
</arguments>
<doc>Wait until the screen is ready, the cursor has been positioned
on a modifiable field, and the keyboard is unlocked.

Sometimes the server will "unlock" the keyboard but the screen
will not yet be ready.  In that case, an attempt to read or write to the
screen will result in a 'E' keyboard status because we tried to read from
a screen that is not yet ready.

Using this method tells the client to wait until a field is
detected and the cursor has been positioned on it.</doc>
<shortdoc>Wait until the screen is ready, the cursor has been positioned on a modifiable field, and the keyboard is unlocked.</shortdoc>
</kw>
<kw name="Wait Until String" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="319">
<arguments repr="txt, timeout=5">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timeout=5">
<name>timeout</name>
<default>5</default>
</arg>
</arguments>
<doc>Wait until a string exists on the mainframe screen to perform the next step. If the string not appear on
5 seconds the keyword will raise a exception. You can define a different timeout.

Example:
    | Wait Until String | something |
    | Wait Until String | something | timeout=10 |</doc>
<shortdoc>Wait until a string exists on the mainframe screen to perform the next step. If the string not appear on 5 seconds the keyword will raise a exception. You can define a different timeout.</shortdoc>
</kw>
<kw name="Write" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="265">
<arguments repr="txt">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
</arguments>
<doc>Send a string to the screen at the current cursor location *and a Enter.*

Example:
    | Write | something |</doc>
<shortdoc>Send a string to the screen at the current cursor location *and a Enter.*</shortdoc>
</kw>
<kw name="Write Bare" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="274">
<arguments repr="txt">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
</arguments>
<doc>Send only the string to the screen at the current cursor location.

Example:
    | Write Bare | something |</doc>
<shortdoc>Send only the string to the screen at the current cursor location.</shortdoc>
</kw>
<kw name="Write Bare In Position" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="295">
<arguments repr="txt, ypos, xpos">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos">
<name>ypos</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos">
<name>xpos</name>
</arg>
</arguments>
<doc>Send only the string to the screen at screen co-ordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write Bare in Position | something | 9 | 11 |</doc>
<shortdoc>Send only the string to the screen at screen co-ordinates "ypos"/"xpos".</shortdoc>
</kw>
<kw name="Write In Position" source="C:\Altran\Robot-Framework-Mainframe-3270-Library\Mainframe3270\x3270.py" lineno="283">
<arguments repr="txt, ypos, xpos">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="txt">
<name>txt</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="ypos">
<name>ypos</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="xpos">
<name>xpos</name>
</arg>
</arguments>
<doc>Send a string to the screen at screen co-ordinates "ypos"/"xpos" and a Enter.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write in Position | something | 9 | 11 |</doc>
<shortdoc>Send a string to the screen at screen co-ordinates "ypos"/"xpos" and a Enter.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>
